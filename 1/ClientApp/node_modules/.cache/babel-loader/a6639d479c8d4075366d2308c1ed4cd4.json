{"ast":null,"code":"// -----------------\n// STATE - This defines the type of data maintained in the Redux store.\n// -----------------\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\n// They do not themselves have any side-effects; they just describe something that is going to happen.\n// Use @typeName and isActionType for type detection that works even after serialization/deserialization.\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\n// declared type strings (and not any other arbitrary string).\n// ----------------\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\nexport var actionCreators={increment:function increment(){return{type:'INCREMENT_COUNT'};},decrement:function decrement(){return{type:'DECREMENT_COUNT'};}};// ----------------\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\nexport var reducer=function reducer(state,incomingAction){if(state===undefined){return{count:0};}var action=incomingAction;switch(action.type){case'INCREMENT_COUNT':return{count:state.count+1};case'DECREMENT_COUNT':return{count:state.count-1};default:return state;}};","map":{"version":3,"names":["actionCreators","increment","type","decrement","reducer","state","incomingAction","undefined","count","action"],"sources":["/Users/vandung31141/Projects/1/1/ClientApp/src/store/Counter.ts"],"sourcesContent":["import { Action, Reducer } from 'redux';\n\n// -----------------\n// STATE - This defines the type of data maintained in the Redux store.\n\nexport interface CounterState {\n    count: number;\n}\n\n// -----------------\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\n// They do not themselves have any side-effects; they just describe something that is going to happen.\n// Use @typeName and isActionType for type detection that works even after serialization/deserialization.\n\nexport interface IncrementCountAction { type: 'INCREMENT_COUNT' }\nexport interface DecrementCountAction { type: 'DECREMENT_COUNT' }\n\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\n// declared type strings (and not any other arbitrary string).\nexport type KnownAction = IncrementCountAction | DecrementCountAction;\n\n// ----------------\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\n\nexport const actionCreators = {\n    increment: () => ({ type: 'INCREMENT_COUNT' } as IncrementCountAction),\n    decrement: () => ({ type: 'DECREMENT_COUNT' } as DecrementCountAction)\n};\n\n// ----------------\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\n\nexport const reducer: Reducer<CounterState> = (state: CounterState | undefined, incomingAction: Action): CounterState => {\n    if (state === undefined) {\n        return { count: 0 };\n    }\n\n    const action = incomingAction as KnownAction;\n    switch (action.type) {\n        case 'INCREMENT_COUNT':\n            return { count: state.count + 1 };\n        case 'DECREMENT_COUNT':\n            return { count: state.count - 1 };\n        default:\n            return state;\n    }\n};\n\n"],"mappings":"AAEA;AACA;AAMA;AACA;AACA;AACA;AAKA;AACA;AAGA;AACA;AACA;AAEA,MAAO,IAAMA,eAAc,CAAG,CAC1BC,SAAS,CAAE,2BAAO,CAAEC,IAAI,CAAE,iBAAR,CAAP,EADe,CAE1BC,SAAS,CAAE,2BAAO,CAAED,IAAI,CAAE,iBAAR,CAAP,EAFe,CAAvB,CAKP;AACA;AAEA,MAAO,IAAME,QAA8B,CAAG,QAAjCA,QAAiC,CAACC,KAAD,CAAkCC,cAAlC,CAA2E,CACrH,GAAID,KAAK,GAAKE,SAAd,CAAyB,CACrB,MAAO,CAAEC,KAAK,CAAE,CAAT,CAAP,CACH,CAED,GAAMC,OAAM,CAAGH,cAAf,CACA,OAAQG,MAAM,CAACP,IAAf,EACI,IAAK,iBAAL,CACI,MAAO,CAAEM,KAAK,CAAEH,KAAK,CAACG,KAAN,CAAc,CAAvB,CAAP,CACJ,IAAK,iBAAL,CACI,MAAO,CAAEA,KAAK,CAAEH,KAAK,CAACG,KAAN,CAAc,CAAvB,CAAP,CACJ,QACI,MAAOH,MAAP,CANR,CAQH,CAdM"},"metadata":{},"sourceType":"module"}