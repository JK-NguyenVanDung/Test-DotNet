{"ast":null,"code":"// In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\nvar isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export default function register(){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){// The URL constructor is available in all browsers that support SW.\nvar url=process.env.PUBLIC_URL;var publicUrl=new URL(url,window.location.toString());if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\nreturn;}window.addEventListener('load',function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){// This is running on localhost. Lets check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl);}else{// Is not local host. Just register service worker\nregisterValidSW(swUrl);}});}}function registerValidSW(swUrl){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the old content will have been purged and\n// the fresh content will have been added to the cache.\n// It's the perfect time to display a \"New content is\n// available; please refresh.\" message in your web app.\nconsole.log('New content is available; please refresh.');}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nvar contentType=response.headers.get('content-type');if(response.status===404||contentType&&contentType.indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl);}}).catch(function(){console.log('No internet connection found. App is running in offline mode.');});}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();});}}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","process","env","NODE_ENV","navigator","url","PUBLIC_URL","publicUrl","URL","toString","origin","addEventListener","swUrl","checkValidServiceWorker","registerValidSW","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload"],"sources":["/Users/vandung31141/Projects/1/1/ClientApp/src/registerServiceWorker.ts"],"sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const url = process.env.PUBLIC_URL as string;\n        const publicUrl = new URL(url, window.location.toString());\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing as ServiceWorker;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA,GAAMA,YAAW,CAAGC,OAAO,CACvBC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,GAA6B,WAA7B,EACA;AACAF,MAAM,CAACC,QAAP,CAAgBC,QAAhB,GAA6B,OAF7B,EAGA;AACAF,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,KAAzB,CACI,wDADJ,CALuB,CAA3B,CAUA,cAAe,SAASC,SAAT,EAAoB,CAC/B,GAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAAzB,EAAyC,iBAAmBC,UAAhE,CAA2E,CACvE;AACA,GAAMC,IAAG,CAAGJ,OAAO,CAACC,GAAR,CAAYI,UAAxB,CACA,GAAMC,UAAS,CAAG,GAAIC,IAAJ,CAAQH,GAAR,CAAaT,MAAM,CAACC,QAAP,CAAgBY,QAAhB,EAAb,CAAlB,CACA,GAAIF,SAAS,CAACG,MAAV,GAAqBd,MAAM,CAACC,QAAP,CAAgBa,MAAzC,CAAiD,CAC7C;AACA;AACA;AACA,OACH,CAEDd,MAAM,CAACe,gBAAP,CAAwB,MAAxB,CAAgC,UAAM,CAClC,GAAMC,MAAK,WAAMX,OAAO,CAACC,GAAR,CAAYI,UAAlB,sBAAX,CAEA,GAAIZ,WAAJ,CAAiB,CACb;AACAmB,uBAAuB,CAACD,KAAD,CAAvB,CACH,CAHD,IAGO,CACH;AACAE,eAAe,CAACF,KAAD,CAAf,CACH,CACJ,CAVD,EAWH,CACJ,CAED,QAASE,gBAAT,CAAyBF,KAAzB,CAAwC,CACpCR,SAAS,CAACW,aAAV,CACKf,QADL,CACcY,KADd,EAEKI,IAFL,CAEU,SAAAC,YAAY,CAAI,CAClBA,YAAY,CAACC,aAAb,CAA6B,UAAM,CAC/B,GAAMC,iBAAgB,CAAGF,YAAY,CAACG,UAAtC,CACAD,gBAAgB,CAACE,aAAjB,CAAiC,UAAM,CACnC,GAAIF,gBAAgB,CAACG,KAAjB,GAA2B,WAA/B,CAA4C,CACxC,GAAIlB,SAAS,CAACW,aAAV,CAAwBQ,UAA5B,CAAwC,CACpC;AACA;AACA;AACA;AACAC,OAAO,CAACC,GAAR,CAAY,2CAAZ,EACH,CAND,IAMO,CACH;AACA;AACA;AACAD,OAAO,CAACC,GAAR,CAAY,oCAAZ,EACH,CACJ,CACJ,CAfD,CAgBH,CAlBD,CAmBH,CAtBL,EAuBKC,KAvBL,CAuBW,SAAAC,KAAK,CAAI,CACZH,OAAO,CAACG,KAAR,CAAc,2CAAd,CAA2DA,KAA3D,EACH,CAzBL,EA0BH,CAED,QAASd,wBAAT,CAAiCD,KAAjC,CAAgD,CAC5C;AACAgB,KAAK,CAAChB,KAAD,CAAL,CACKI,IADL,CACU,SAAAa,QAAQ,CAAI,CACd;AACA,GAAMC,YAAW,CAAGD,QAAQ,CAACE,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAApB,CACA,GAAIH,QAAQ,CAACI,MAAT,GAAoB,GAApB,EAA4BH,WAAW,EAAIA,WAAW,CAACI,OAAZ,CAAoB,YAApB,IAAsC,CAAC,CAAtF,CAA0F,CACtF;AACA9B,SAAS,CAACW,aAAV,CAAwBoB,KAAxB,CAA8BnB,IAA9B,CAAmC,SAAAC,YAAY,CAAI,CAC/CA,YAAY,CAACmB,UAAb,GAA0BpB,IAA1B,CAA+B,UAAM,CACjCpB,MAAM,CAACC,QAAP,CAAgBwC,MAAhB,GACH,CAFD,EAGH,CAJD,EAKH,CAPD,IAOO,CACH;AACAvB,eAAe,CAACF,KAAD,CAAf,CACH,CACJ,CAfL,EAgBKc,KAhBL,CAgBW,UAAM,CACTF,OAAO,CAACC,GAAR,CAAY,+DAAZ,EACH,CAlBL,EAmBH,CAED,MAAO,SAASW,WAAT,EAAsB,CACzB,GAAI,iBAAmBhC,UAAvB,CAAkC,CAC9BA,SAAS,CAACW,aAAV,CAAwBoB,KAAxB,CAA8BnB,IAA9B,CAAmC,SAAAC,YAAY,CAAI,CAC/CA,YAAY,CAACmB,UAAb,GACH,CAFD,EAGH,CACJ"},"metadata":{},"sourceType":"module"}